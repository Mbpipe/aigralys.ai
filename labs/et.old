/* <!doctype html>
<html lang="es">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1,viewport-fit=cover">
<title>Medidor √ìptico Facial ‚Äî Gu√≠a CR80</title>
<style>
  :root{--bg:#eef2ff;--ink:#0f172a;--mut:#64748b;--vio:#6d28d9;--ok:#16a34a;--bad:#dc2626}
  *{box-sizing:border-box} html,body{margin:0;background:var(--bg);color:var(--ink);font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial}
  .wrap{max-width:760px;margin:16px auto;padding:0 12px}
  .card{background:#fff;border-radius:16px;box-shadow:0 10px 28px rgba(2,6,23,.08);padding:14px}
  .row{display:flex;gap:10px;flex-wrap:wrap;align-items:center}
  h1{margin:0 0 4px;font-size:28px} h2{margin:0 0 10px;font-size:20px}
  .pill{background:#eef2ff;border-radius:999px;padding:6px 10px;font-size:12px}
  button{border:0;border-radius:12px;padding:12px 16px;font-weight:800;cursor:pointer;color:#fff;background:var(--vio)}
  button.red{background:var(--bad)} button.gray{background:#334155} button:disabled{opacity:.55;cursor:not-allowed}
  .pane{position:relative;border-radius:14px;overflow:hidden;background:#000;min-height:320px}
  /* feed = video dibujado; overlay = HUD por encima */
  canvas#feed{display:block;width:100%;height:auto;max-height:62vh}
  canvas#overlay{position:absolute;inset:0;pointer-events:none}
  #badge{position:absolute;left:12px;top:12px;color:#fff;font-weight:900;text-shadow:0 2px 6px rgba(0,0,0,.6)}
  #meter{position:absolute;left:12px;bottom:12px;background:rgba(2,6,23,.7);color:#fff;border-radius:10px;padding:6px 10px;font-size:12px}
  /* Botones flotantes dentro del visor (f√°ciles de tocar con una mano) */
  .floatbar{position:absolute;left:0;right:0;bottom:10px;display:flex;gap:8px;justify-content:center}
  .floatbar > *{transform:translateZ(0)}
  .btnBig{background:#0ea5e9;border-radius:999px;padding:10px 16px;font-weight:900}
  .chip{background:rgba(2,6,23,.65);color:#fff;border-radius:999px;padding:8px 10px;font-size:12px;display:flex;align-items:center;gap:6px}
  .chip input{transform:scale(1.2)}
  .small{font-size:12px;color:var(--mut)}
  .grid{display:grid;grid-template-columns:1fr 1fr;gap:10px}
  .box{background:#f8fafc;border-radius:12px;padding:10px}
  #log{white-space:pre-wrap;font-family:ui-monospace,Menlo,Consolas,monospace;font-size:12px;background:#0b1020;color:#c7d2fe;padding:10px;border-radius:10px;max-height:160px;overflow:auto}
  /* Ocultamos el <video>; usamos canvas feed */
  video{display:none}
</style>
<!-- OpenCV + MediaPipe -->
<script src="https://docs.opencv.org/4.x/opencv.js" async></script>
<script src="https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh/face_mesh.js" async></script>
<script src="https://cdn.jsdelivr.net/npm/@mediapipe/camera_utils/camera_utils.js" async></script>
</head>
<body>
<div class="wrap">
  <div class="card" style="margin-bottom:10px">
    <div class="row" style="justify-content:space-between">
      <div>
        <h1>Medidor √ìptico Facial</h1>
        <div class="small">Gu√≠a CR80 + OpenCV/MediaPipe</div>
      </div>
      <div class="row">
        <span id="p-sec" class="pill">secure: ‚Äî</span>
        <span id="p-ocv" class="pill">opencv: loading‚Ä¶</span>
        <span id="p-sta" class="pill">estado: idle</span>
      </div>
    </div>
  </div>

  <div class="card">
    <h2>Captura de Imagen</h2>
    <div class="row" style="margin:8px 0 12px">
      <label class="row">
        <button id="pick" class="gray">üñºÔ∏è Subir Foto</button>
        <input id="file" type="file" accept="image/*" style="display:none">
      </label>
      <button id="open">üì∑ C√°mara</button>
      <button id="close" class="red">üõë Cerrar</button>
    </div>

    <div class="pane" id="pane">
      <video id="v" playsinline muted></video>
      <canvas id="feed"></canvas>
      <canvas id="overlay"></canvas>
      <div id="badge" style="display:none"></div>
      <div id="meter" style="display:none"></div>

      <div class="floatbar" id="floatbar" style="display:none">
        <label class="chip"><input id="useGuide" type="checkbox" checked>Usar Gu√≠a CR80</label>
        <label class="chip"><input id="autoCap" type="checkbox">Auto-capturar</label>
        <button id="capture" class="btnBig">üì∏ Capturar</button>
      </div>
    </div>

    <div class="row" style="margin-top:10px">
      <button id="process" class="gray">üßÆ Procesar</button>
    </div>

    <div id="log" style="margin-top:10px"></div>
  </div>

  <div id="out" class="card" style="display:none;margin-top:10px">
    <h2>Resultado</h2>
    <div class="grid" style="margin-top:6px">
      <div class="box"><div class="small">IPD</div><div id="ipd" style="font-size:28px;font-weight:900">‚Äì</div></div>
      <div class="box">
        <div class="small">Escala</div>
        <div style="font-weight:800"><span id="pxmm">‚Äì</span> px/mm</div>
        <div id="scaleSrc" class="small">‚Äì</div>
      </div>
    </div>
    <div style="position:relative;margin-top:10px">
      <img id="final" style="width:100%;border-radius:12px" alt="">
      <a id="dl" download="annotated.png" class="small" style="display:inline-block;margin-top:6px">Descargar PNG</a>
    </div>
  </div>
</div>

<script>
/* ---------- Utils ---------- */
const $=id=>document.getElementById(id);
const v=$('v'), feed=$('feed'), overlay=$('overlay'),
      fctx=feed.getContext('2d',{willReadFrequently:true}),
      octx=overlay.getContext('2d',{willReadFrequently:true});
const pane=$('pane'), badge=$('badge'), meter=$('meter'), floatbar=$('floatbar');
const pSec=$('p-sec'), pOcv=$('p-ocv'), pSta=$('p-sta'), logEl=$('log');
const btnOpen=$('open'), btnClose=$('close'), btnCapture=$('capture'), btnProcess=$('process'), pickBtn=$('pick'), fileIn=$('file');
const out=$('out'), ipdEl=$('ipd'), pxmmEl=$('pxmm'), scaleSrcEl=$('scaleSrc'), finalImg=$('final'), dl=$('dl');

pSec.textContent='secure: '+String(window.isSecureContext);
const log = s=> logEl.textContent = `[${new Date().toLocaleTimeString()}] ${s}\n` + logEl.textContent;
const setState=s=>pSta.textContent='estado: '+s;

const CR80_W=85.60, CR80_H=53.98, AR=CR80_W/CR80_H;

/* ---------- OpenCV ready ---------- */
let ocvReady=false;
if(window.cv && cv.getBuildInformation){ ocvReady=true; pOcv.textContent='opencv: ready' }
else{
  pOcv.textContent='opencv: loading‚Ä¶';
  window.Module={onRuntimeInitialized:()=>{ ocvReady=true; pOcv.textContent='opencv: ready'; log('OpenCV listo') }};
}

/* ---------- Layout / sizes ---------- */
function sizeCanvases(){
  const r=pane.getBoundingClientRect();
  feed.width=r.width; feed.height=r.height;
  overlay.width=r.width; overlay.height=r.height;
}
new ResizeObserver(sizeCanvases).observe(pane); sizeCanvases();

/* ---------- Video draw (mirror + cover) ---------- */
let stream=null, raf=0, captured=null;
let scaleDisplay=1, offsetX=0, offsetY=0;

function drawVideoToFeed(){
  if(!v.videoWidth){ raf=requestAnimationFrame(drawVideoToFeed); return }
  const cw=feed.width, ch=feed.height;
  const vw=v.videoWidth, vh=v.videoHeight;

  // cover
  scaleDisplay = Math.max(cw/vw, ch/vh);
  const dw = vw*scaleDisplay, dh = vh*scaleDisplay;
  offsetX = (cw-dw)/2; offsetY = (ch-dh)/2;

  fctx.save();
  fctx.clearRect(0,0,cw,ch);
  // mirror
  fctx.translate(cw,0); fctx.scale(-1,1);
  // dibujar centrado con cover
  fctx.drawImage(v, 0,0,vw,vh, (-offsetX), offsetY, dw, dh);
  fctx.restore();

  drawHUD();
  raf=requestAnimationFrame(drawVideoToFeed);
}

/* ---------- Gu√≠a CR80 + detecci√≥n en ROI (mismo canvas feed) ---------- */
const guide = {x:0,y:0,w:0,h:0, pxPerMm:null};
let okStreak=0; // autocaptura
const useGuide = $('useGuide'); const autoCap = $('autoCap');

function drawHUD(){
  octx.clearRect(0,0,overlay.width,overlay.height);
  if(!useGuide.checked){ badge.style.display='none'; meter.style.display='none'; okStreak=0; guide.pxPerMm=null; return }

  const vw=overlay.width, vh=overlay.height;
  const gw=Math.round(Math.min(vw,vh)*0.34);
  const gh=Math.round(gw/AR);
  const gx=Math.round((vw-gw)/2);
  const gy=Math.round(vh*0.58-gh/2);

  guide.x=gx; guide.y=gy; guide.w=gw; guide.h=gh;

  // m√°scara
  octx.fillStyle='rgba(0,0,0,.35)'; octx.fillRect(0,0,vw,vh);
  octx.clearRect(gx,gy,gw,gh);

  badge.style.display='block'; meter.style.display='block';

  // ROI desde feed (alineado 1:1 con overlay)
  let ok=false, score=0, fill=0, angle=0, centerDist=0;
  if(ocvReady){
    const img=fctx.getImageData(gx,gy,gw,gh);
    const r=ocvDetect(img,gw,gh);
    if(r && r.found){
      score=r.score; fill=r.fill; angle=r.angle; centerDist=r.centerDist;
      ok = (score>=0.60) && (fill>=0.86 && fill<=1.08) && (centerDist<=0.10) && (angle<=12);
    }
  }

  // borde seg√∫n ok
  octx.lineWidth=4; octx.strokeStyle = ok? '#16a34a' : '#a78bfa'; octx.strokeRect(gx,gy,gw,gh);
  badge.textContent = `Gu√≠a CR80 ‚Äî ${ok?'OK':'ajusta'} ‚Ä¢ score ${Math.round(score*100)}%`;

  if(ok){
    // ESCALA CORRECTA: convertir px del canvas a px nativos con scaleDisplay
    guide.pxPerMm = (gw/scaleDisplay) / CR80_W;
    meter.textContent = `px/mm=${guide.pxPerMm.toFixed(3)} ‚Ä¢ fill=${Math.round(fill*100)}% ‚Ä¢ ang=${angle.toFixed(1)}¬∞`;
    okStreak++;
  }else{
    meter.textContent = `Ancho:${gw}px ‚Ä¢ Alto:${gh}px`;
    okStreak=0; guide.pxPerMm=null;
  }

  // autocaptura prudente (‚âà 12 frames OK)
  if(autoCap.checked && okStreak>=12){ okStreak=0; captureNow(); }
}

function ocvDetect(img,w,h){
  try{
    const cvReady = window.cv && cv.Mat; if(!cvReady) return null;
    const src=cv.matFromImageData(img);
    const gray=new cv.Mat(), blur=new cv.Mat(), edges=new cv.Mat();
    cv.cvtColor(src,gray,cv.COLOR_RGBA2GRAY);
    cv.equalizeHist(gray,gray);
    cv.GaussianBlur(gray,blur,new cv.Size(5,5),0);
    let s=0; const dd=blur.data; for(let i=0;i<dd.length;i++) s+=dd[i];
    const m=s/dd.length, lo=Math.max(0,0.66*m), hi=Math.min(255,1.33*m);
    cv.Canny(blur,edges,lo,hi);
    const k=cv.getStructuringElement(cv.MORPH_RECT,new cv.Size(3,3)); cv.dilate(edges,edges,k);
    const cont=new cv.MatVector(), hier=new cv.Mat();
    cv.findContours(edges,cont,hier,cv.RETR_EXTERNAL,cv.CHAIN_APPROX_SIMPLE);
    let best=null, bestScore=0;
    for(let i=0;i<cont.size();i++){
      const c=cont.get(i); const area=cv.contourArea(c); if(area<(w*h)*0.10){ c.delete(); continue }
      const r=cv.minAreaRect(c);
      const L=Math.max(r.size.width,r.size.height), S=Math.min(r.size.width,r.size.height);
      const ar=L/S, arScore=Math.max(0,1-Math.min(Math.abs(ar-(CR80_W/CR80_H))/0.18,1));
      const contScore=Math.max(0,Math.min(1,(area/(w*h))*2.0));
      const score=0.72*arScore+0.28*contScore;
      if(score>bestScore){
        bestScore=score;
        const fill = (r.size.width*r.size.height)/(w*h);
        const cx=r.center.x/w - 0.5, cy=r.center.y/h - 0.5;
        const centerDist = Math.hypot(cx,cy);
        const angle = Math.abs(r.angle);
        best={found:true,score,fill,centerDist,angle};
      }
      c.delete();
    }
    gray.delete(); blur.delete(); edges.delete(); cont.delete(); hier.delete(); src.delete();
    return best||{found:false,score:0};
  }catch(e){ log('ocv error: '+e); return null }
}

/* ---------- C√°mara ---------- */
function openCam(){
  out.style.display='none'; captured=null;
  (async ()=>{
    setState('opening');
    try{
      v.setAttribute('playsinline',''); v.playsInline=true; v.muted=true;
      const st=await navigator.mediaDevices.getUserMedia({video:{facingMode:{ideal:'user'},width:{ideal:1280},height:{ideal:720}},audio:false});
      v.srcObject=st; await v.play().catch(()=>setTimeout(()=>v.play().catch(()=>{}),150));
      stream=st; setState('ready'); floatbar.style.display='flex'; badge.style.display='block'; meter.style.display='block';
      requestAnimationFrame(drawVideoToFeed);
    }catch(e){ setState('error'); alert('No se pudo acceder a la c√°mara: '+e.message); }
  })();
}
function closeCam(){
  cancelAnimationFrame(raf); try{v.pause()}catch{}
  v.srcObject=null; if(stream){stream.getTracks().forEach(t=>t.stop()); stream=null}
  setState('idle'); floatbar.style.display='none'; badge.style.display='none'; meter.style.display='none';
  fctx.clearRect(0,0,feed.width,feed.height); octx.clearRect(0,0,overlay.width,overlay.height);
}

/* ---------- Captura / Proceso ---------- */
function captureNow(){
  if(!v.videoWidth){ alert('La c√°mara a√∫n no est√° lista'); return }
  // capturamos a resoluci√≥n nativa
  const c=document.createElement('canvas'); c.width=v.videoWidth; c.height=v.videoHeight;
  const x=c.getContext('2d');
  // espejo horizontal
  x.translate(c.width,0); x.scale(-1,1);
  x.drawImage(v,0,0,c.width,c.height);
  captured=c.toDataURL('image/jpeg',0.92);
  closeCam();
  log('Foto capturada');
}

async function processNow(){
  try{
    if(!captured){ captureNow() }
    const img=await new Promise((res,rej)=>{ const im=new Image(); im.src=captured; im.onload=()=>res(im); im.onerror=rej });

    // px/mm: si la gu√≠a estaba OK, usamos guide.pxPerMm (ya convertida a nativo); si no, estimamos.
    let pxmm = guide.pxPerMm ? guide.pxPerMm : (Math.min(img.width,img.height)*0.22)/CR80_W;
    pxmmEl.textContent = pxmm.toFixed(3);
    scaleSrcEl.textContent = guide.pxPerMm ? 'Gu√≠a CR80 (mapeo a nativo)' : 'Estimaci√≥n';

    // Pupilas (MediaPipe si est√°; si no, estimaci√≥n)
    let L=null;
    if(window.FaceMesh){
      const fm=new window.FaceMesh({locateFile:f=>`https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh/${f}`});
      fm.setOptions({maxNumFaces:1,refineLandmarks:true,minDetectionConfidence:0.5,minTrackingConfidence:0.5});
      L=await new Promise(resolve=>{
        const c=document.createElement('canvas'); c.width=img.width; c.height=img.height;
        c.getContext('2d').drawImage(img,0,0);
        fm.onResults(r=>{
          if(r.multiFaceLandmarks && r.multiFaceLandmarks[0]){
            const lm=r.multiFaceLandmarks[0];
            const iris=a=>({x:a.reduce((s,l)=>s+l.x*img.width,0)/a.length, y:a.reduce((s,l)=>s+l.y*img.height,0)/a.length});
            resolve({left:iris(lm.slice(473,477)), right:iris(lm.slice(468,472))});
          } else resolve(null);
        });
        fm.send({image:c});
      });
    }
    if(!L){ const cx=img.width/2, cy=img.height*0.45, d=img.width*0.15/2; L={left:{x:cx-d,y:cy}, right:{x:cx+d,y:cy}} }

    const dx=L.right.x-L.left.x, dy=L.right.y-L.left.y;
    const ipd=Math.round((Math.hypot(dx,dy)/pxmm)*10)/10;
    ipdEl.textContent=ipd+' mm';

    // anotado
    const outC=document.createElement('canvas'); outC.width=img.width; outC.height=img.height;
    const a=outC.getContext('2d'); a.drawImage(img,0,0);
    a.fillStyle='#ff0000';
    a.beginPath(); a.arc(L.left.x,L.left.y,10,0,Math.PI*2); a.fill();
    a.beginPath(); a.arc(L.right.x,L.right.y,10,0,Math.PI*2); a.fill();
    a.strokeStyle='#ff0000'; a.lineWidth=4; a.beginPath(); a.moveTo(L.left.x,L.left.y); a.lineTo(L.right.x,L.right.y); a.stroke();
    a.font='bold 36px system-ui,-apple-system'; a.fillStyle='#fff'; a.strokeStyle='#000'; a.lineWidth=6;
    const mx=(L.left.x+L.right.x)/2, my=(L.left.y+L.right.y)-28;
    a.strokeText(`IPD: ${ipd} mm`, mx-110, my); a.fillText(`IPD: ${ipd} mm`, mx-110, my);
    const url=outC.toDataURL('image/png');
    finalImg.src=url; dl.href=url; out.style.display='block';
    out.scrollIntoView({behavior:'smooth'});
  }catch(e){ alert('No se pudo procesar: '+e.message) }
}

/* ---------- Eventos ---------- */
btnOpen.onclick=openCam;
btnClose.onclick=closeCam;
btnCapture.onclick=captureNow;
btnProcess.onclick=processNow;
pickBtn.onclick=()=>fileIn.click();
fileIn.onchange=e=>{
  const f=e.target.files?.[0]; if(!f) return;
  const rd=new FileReader(); rd.onload=ev=>{
    captured=ev.target.result; closeCam(); log('Foto cargada'); out.style.display='none';
  }; rd.readAsDataURL(f);
};
</script>
</body>
</html> */ 